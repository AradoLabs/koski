#!/usr/bin/env ruby

# intentionally only using std-lib classes.
require 'net/https'
require 'json'

identity = URI("https://pouta.csc.fi:5001/v2.0/tokens")
compute = URI("https://pouta.csc.fi:8777/v2/964d00459e3b4bbe943735c1b92d72c9/servers/detail")

def https_request(uri, req, token=nil)
  https = Net::HTTP.new(uri.host, uri.port)
  https.use_ssl = true
  req['X-Auth-Token'] = token if token
  JSON.parse(https.request(req).body)
end
def https_post(uri, data, token=nil)
  req = Net::HTTP::Post.new(uri.path, initheader = {'Content-Type' =>'application/json'})
  req.body = data.to_json
  https_request(uri, req, token)
end
def https_get(uri, token=nil)
  req = Net::HTTP::Get.new(uri.request_uri)
  https_request(uri, req, token)
end
def login(ident_uri)
  resp = https_post(ident_uri, {auth: {tenantName: ENV['OS_TENANT_NAME'], passwordCredentials: {username: ENV['OS_USERNAME'], password: ENV['OS_PASSWORD']}}})
  resp['access']['token']['id']
end
def find_server_by_name(compute_uri, access_token, name)
  server = https_get(compute_uri, access_token)['servers'].find{|s| s['name'] == name}
  abort("ERROR: Server not found.") if not server
  server
end
def server_ip(server)
  server['addresses'][ENV['OS_TENANT_NAME']].
    find{ |a| a['OS-EXT-IPS:type'] == 'fixed'}['addr']
end

abort("ERROR: Give server name to lookup.") if not ARGV[0]
abort("ERROR: Missing pouta environment variables") if not ENV['OS_TENANT_NAME']
env_prefix = ENV['TF_VAR_env']
server_name = "%s%s" % [env_prefix ? env_prefix + "-" : "", ARGV[0]]

token = login(identity)
puts server_ip(find_server_by_name(compute, token, server_name))
